name: Build & Release

on:
  push:
    paths:
      - 'package.json'        # триггер только при изменении версии

jobs:
  build:
    runs-on: windows-latest

    steps:
    # ──────────────────────── clone репозитория ────────────────────────
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2        # нужен HEAD^1 для сравнения версий

    # ─────────── предыдущая версия (если пакет был раньше) ─────────────
    - name: Get previous commit SHA
      id: prev_sha
      shell: bash
      run: echo "sha=$(git rev-parse HEAD^1 || echo 0000000)" >> $GITHUB_OUTPUT

    - name: Read previous version
      id: prev
      shell: bash
      run: |
        if git cat-file -e ${{ steps.prev_sha.outputs.sha }}:package.json 2>/dev/null; then
          git show ${{ steps.prev_sha.outputs.sha }}:package.json > old_package.json
          echo "version=$(jq -r .version old_package.json)" >> $GITHUB_OUTPUT
        else
          echo "version=none" >> $GITHUB_OUTPUT
        fi

    # ───────────── текущая версия (из рабочего дерева) ────────────────
    - name: Read current version
      id: curr
      shell: bash
      run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

    # ─────────── ставим флаг changed / unchanged ────────────
    - name: Compare versions
      id: compare
      shell: bash
      run: |
        if [ "${{ steps.prev.outputs.version }}" = "none" ] || [ "${{ steps.prev.outputs.version }}" != "${{ steps.curr.outputs.version }}" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    # ─────────── пропускаем сборку, если версия та же ──────────────────
    - name: Skip build (version unchanged)
      if: steps.compare.outputs.changed != 'true'
      run: echo "Version unchanged – skipping build."

    # ─────────────────────── Node.js без встроенного cache ─────────────
    - name: Set up Node.js
      if: steps.compare.outputs.changed == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: 22

    # ─────────────── условный кэш Yarn (только если lock есть) ─────────
    - name: Cache Yarn
      if: steps.compare.outputs.changed == 'true' && hashFiles('yarn.lock') != ''
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    # ───────────────────── установка зависимостей ──────────────────────
    - name: Install dependencies
      if: steps.compare.outputs.changed == 'true'
      shell: bash
      run: |
        if [ -f yarn.lock ]; then
          yarn install --frozen-lockfile
        else
          yarn install --no-lockfile --non-interactive
        fi

    # ─────────────────────────── сборка Forge ──────────────────────────
    - name: Build app (electron-forge make)
      if: steps.compare.outputs.changed == 'true'
      run: yarn make

    # ───────────────────── загрузка артефактов в Actions ───────────────
    - name: Upload artifacts
      if: steps.compare.outputs.changed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: nhapp-make
        path: |
          out/make/**/*
          !out/make/*.blockmap

    # ─────────────────────────── GitHub Release ────────────────────────
    - name: Create GitHub Release
      if: steps.compare.outputs.changed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.curr.outputs.version }}
        name: v${{ steps.curr.outputs.version }}
        files: |
          out/make/**/*.exe
          out/make/**/*.zip
          out/make/**/*.deb
          out/make/**/*.rpm
