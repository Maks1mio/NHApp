name: Build & Release

on:
  push:
    paths:
      - 'package.json'        # триггер только при изменении файла

jobs:
  build:
    runs-on: windows-latest

    steps:
    # ──────────────────────────── Git clone ────────────────────────────
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2        # нужен HEAD^1 для предыдущей версии

    # ───────────── читаем предыдущую версию (если пакет был раньше) ─────
    - name: Get previous commit SHA
      id: prev_sha
      shell: bash
      run: echo "sha=$(git rev-parse HEAD^1 || echo 0000000)" >> $GITHUB_OUTPUT

    - name: Read previous version
      id: prev
      shell: bash
      run: |
        if git cat-file -e ${{ steps.prev_sha.outputs.sha }}:package.json 2>/dev/null; then
          git show ${{ steps.prev_sha.outputs.sha }}:package.json > old_package.json
          echo "version=$(jq -r .version old_package.json)" >> $GITHUB_OUTPUT
        else
          echo "version=none" >> $GITHUB_OUTPUT
        fi

    # ───────────── читаем текущую версию и кладём в outputs ─────────────
    - name: Read current version
      id: curr
      shell: bash
      run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

    # ─────────── сравниваем и ставим флаг changed / unchanged ───────────
    - name: Compare versions
      id: compare
      shell: bash
      run: |
        if [ "${{ steps.prev.outputs.version }}" = "none" ] || [ "${{ steps.prev.outputs.version }}" != "${{ steps.curr.outputs.version }}" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    # ─────────────── пропускаем дальнейшие шаги, если без изменений ─────
    - name: Skip build (version unchanged)
      if: steps.compare.outputs.changed != 'true'
      run: echo "Version unchanged – skipping build."

    # ───────────────────────── Node + Yarn с кэшем ──────────────────────
    - name: Set up Node.js
      if: steps.compare.outputs.changed == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: 22
        cache: yarn                       # встроенный кэш ~/.cache/yarn

    # ─────────────────────────── установка deps ─────────────────────────
    - name: Install dependencies
      if: steps.compare.outputs.changed == 'true'
      run: yarn install --frozen-lockfile

    # ───────────────────────────── сборка app ───────────────────────────
    - name: Build app (electron-forge make)
      if: steps.compare.outputs.changed == 'true'
      run: yarn make                     # Forge подхватит forge.config.ts + ts-node

    # ───────────────────── загрузка артефактов в Actions ────────────────
    - name: Upload artifacts
      if: steps.compare.outputs.changed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: nhapp-make
        path: |
          out/make/**/*
          !out/make/*.blockmap           # не тащим большие .blockmap

    # ───────────────────────────── GitHub Release ───────────────────────
    - name: Create GitHub Release
      if: steps.compare.outputs.changed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.curr.outputs.version }}
        name: v${{ steps.curr.outputs.version }}
        files: |
          out/make/**/*.exe
          out/make/**/*.zip
          out/make/**/*.deb
          out/make/**/*.rpm
